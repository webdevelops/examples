import {
  FETCH_ALL_PHONES_REQUEST,
  FETCH_ALL_PHONES_SUCCESS,
  FETCH_ALL_PHONES_FAILURE,
  LOAD_MORE_PHONES_REQUEST,
  LOAD_MORE_PHONES_SUCCESS,
  LOAD_MORE_PHONES_FAILURE,
  FETCH_PHONE_BY_ID_REQUEST,
  FETCH_PHONE_BY_ID_SUCCESS,
  FETCH_PHONE_BY_ID_FAILURE,
  ADD_PHONE_TO_BASKET,
  SEARCH_PHONE,
  FETCH_CATEGORIES_REQUEST,
  FETCH_CATEGORIES_SUCCESS,
  FETCH_CATEGORIES_FAILURE,
  REMOVE_PHONE_FROM_BASKET,
  CLEAN_BASKET
} from './actionTypes'

import { 
  getAllPhones, 
  loadMorePhonesApi, 
  fetchPhoneByIdApi,
  fetchCategoriesApi
} from 'api/mockPhonesService'

import { getRenderPhonesLength } from 'selectors'

const allPhonesRequested = () => ({ type: FETCH_ALL_PHONES_REQUEST })

const allPhonesLoaded = (allPhones) => (
  {
    type: FETCH_ALL_PHONES_SUCCESS,
    payload: allPhones
  }
)

const allPhonesError = (error) => (
  {
    type: FETCH_ALL_PHONES_FAILURE,
    payload: error,
    error: true
  }
)

export const fetchAllPhones = () => dispatch => {
  dispatch(allPhonesRequested())
  getAllPhones()
    .then((data) => dispatch(allPhonesLoaded(data)))
    .catch((err) => dispatch(allPhonesError(err)))
}

const morePhonesRequested = () => ({ type: LOAD_MORE_PHONES_REQUEST })

// const morePhonesSuccess = phones => ({
//   type: LOAD_MORE_PHONES_SUCCESS,
//   payload: phones
// })
const morePhonesSuccess = phones => {
  return {
    type: LOAD_MORE_PHONES_SUCCESS,
    payload: phones
  }
}

const morePhonesError = error => ({
  type: LOAD_MORE_PHONES_FAILURE,
  payload: error
})

export const loadMorePhones = () => (dispatch, setState) => {
  const offset = getRenderPhonesLength(setState())
  dispatch(morePhonesRequested())
  loadMorePhonesApi({ offset })
    .then((data) => dispatch(morePhonesSuccess(data)))
    .catch((err) => dispatch(morePhonesError(err)))
}

export const fetchPhoneById = id => async dispatch => {
  dispatch({ type: FETCH_PHONE_BY_ID_REQUEST })

  try {
    const phone = await fetchPhoneByIdApi(id)
    dispatch({
      type: FETCH_PHONE_BY_ID_SUCCESS,
      payload: phone,
      loading: false
    })
  } catch (err) {
    dispatch({
      type: FETCH_PHONE_BY_ID_FAILURE,
      payload: err,
      loading: false,
      error: true
    })
  }
}

export const addPhoneToBasket = id => dispatch => {
  dispatch({
    type: ADD_PHONE_TO_BASKET,
    payload: id
  })
}

export const searchPhone = text => dispatch => {
  dispatch({
    type: SEARCH_PHONE,
    payload: text
  })
}

export const fetchCategories = () => async dispatch => {
  dispatch({
    type: FETCH_CATEGORIES_REQUEST
  })

  try {
    const categories = await fetchCategoriesApi()
    dispatch({
      type: FETCH_CATEGORIES_SUCCESS,
      payload: categories
    })
  } catch (err) {
    dispatch({
      type: FETCH_CATEGORIES_FAILURE,
      payload: err,
      error: true
    })
  }
}

export const removePhoneFromBasket = id => dispatch => {
  dispatch({
    type: REMOVE_PHONE_FROM_BASKET,
    payload: id
  })
}

export const cleanBasket = () => dispatch => {
  dispatch({
    type: CLEAN_BASKET
  })
}

export const checkoutBasket = phones => () => {
  alert(JSON.stringify(phones))
}