import * as R from 'ramda'

// export const getPhoneById = (state, id) => state.phones[id]
export const getPhoneById = (state, id) => R.prop(id, state.phones)

// export const getActiveCategoryId = ownProps => ownProps.match.params.id
export const getActiveCategoryId = ownProps => R.path(['match', 'params', 'id'], ownProps)

// export const getPhones = (state, ownProps) => {
// 	const activeCategoryId = getActiveCategoryId(ownProps)
// 	const applySearch = item => R.contains(
// 		state.phonesPage.search,
// 		R.prop('name', item)
// 	)
// 	const applyCategory = item => R.equals(
// 		activeCategoryId,
// 		R.prop('categoryId', item),
// 	)
// 	const phones = R.compose(
// 		R.filter(applySearch),
// 		R.when(() => activeCategoryId, R.filter(applyCategory)),
// 		R.map(id => getPhoneById(state, id))
// 	)(state.phonesPage.ids)

//   // console.log("TCL: phones", phones)
// 	return phones
// }
export const getPhones = (state, ownProps) => {
	const activeCategoryId = getActiveCategoryId(ownProps)
	const filteredBySearch = state.phonesPage.ids
		.map(id => getPhoneById(state, id))
		.filter(phone => phone.name
			.toLowerCase()
			.indexOf(state.phonesPage.search.toLowerCase()) !== -1)

	const filteredByCategory = 
		filteredBySearch.filter(phone => phone.categoryId === activeCategoryId)

	return activeCategoryId ? filteredByCategory : filteredBySearch
}

// export const getRenderPhonesLength = state => state.phonesPage.ids.length
export const getRenderPhonesLength = state => R.length(state.phonesPage.ids)

// export const getTotalBasketCount = state => state.basket.length
export const getTotalBasketCount = state => R.length(state.basket)

// export const getTotalBasketPrice = state => {
// 	return state.basket
// 		.map(id => getPhoneById(state, id))
// 		.map(phone => phone.price)
// 		.reduce((a, b) => a + b, 0)
// }
export const getTotalBasketPrice = state => {
	return R.compose(
		R.sum,
		R.map(R.prop('price')),
		R.map(id => getPhoneById(state, id))
	)(state.basket)
}

// export const getCategories = state =>
	// Object.keys(state.categories).map(key => state.categories[key])
export const getCategories = state => R.values(state.categories)

// export const getBasketPhonesWithCount = state => {
// 	const uniqueId = [...new Set(state.basket)]

// 	const phoneCount = id => state.basket
// 		.filter(basketId => basketId === id)
// 		.length

// 	const phones = uniqueId
// 		.map(id => getPhoneById(state, id))
// 		.map(phone => ({...phone, count: phoneCount(phone.id)}))

// 	return phones
// }
export const getBasketPhonesWithCount = state => {
	const uniqueId = R.uniq(state.basket)

	const phoneCount = id => R.compose(
		R.length,
		R.filter(basketId => R.equals(id, basketId))
	)(state.basket)

	const phoneWithCount = phone => R.assoc('count', phoneCount(phone.id), phone)

	const phones = R.compose(
		R.map(phoneWithCount),
		R.map(id => getPhoneById(state, id))
	)(uniqueId)

  return phones
}